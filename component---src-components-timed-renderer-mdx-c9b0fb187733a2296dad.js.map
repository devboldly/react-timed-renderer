{"version":3,"sources":["webpack:///../src/components/TimedRenderer.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","interval","render","time","Date","toString","of","TimedRenderer","style","width","height","transition","borderRadius","Math","floor","random","backgroundColor","boxShadow","isMDXComponent"],"mappings":"+QAUaA,G,UAAe,S,kNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,uCACA,kBACE,GAAM,eADR,eAGA,8FACA,sJACA,mCAAkB,iBAAGC,WAAW,IAC5B,KAAQ,4DADM,6BAAlB,KAGA,kBACE,GAAM,SADR,SAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,4DAIL,uBACF,YAAC,IAAD,CAAYD,QAAQ,cAClB,YAAC,IAAD,CAAeE,SAAU,IAAMC,OAAQ,SAAAC,GAAI,OAAI,uCAAmBA,EAAO,KAAO,IAAIC,KAAKD,GAAME,aAAmBN,QAAQ,mBAE5H,4GAIA,uBACA,wBAEE,kJACA,kBACE,GAAM,SADR,SAGA,YAAC,IAAD,CAAOO,GAAIC,IAAeR,QAAQ,UAClC,8BACE,iBAAGC,WAAW,cAAd,iDAEF,kBACE,GAAM,WADR,WAGA,iNACA,mIACA,wEACA,uBACF,YAAC,IAAD,CAAYD,QAAQ,cAClB,YAAC,IAAD,CAAeE,SAAU,IAAKC,OAAQ,SAAAC,GAAI,OAAI,mBAAKK,MAAO,CACpDC,MAAO,QACPC,OAAQ,QACRC,WAAY,mBACZC,aAAiBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAArB,KAAyCF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAzD,KAA6EF,KAAKC,MAAsB,IAAhBD,KAAKE,UAA7F,KAAiHF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAjI,OAAuJF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAvK,KAA2LF,KAAKC,MAAsB,IAAhBD,KAAKE,UAA3M,KAA+NF,KAAKC,MAAsB,IAAhBD,KAAKE,UAA/O,KAAmQF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAnR,IACZC,gBAAiB,IAAIH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBV,SAAS,IACnEY,UAAW,oBAAoBJ,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBV,SAAS,QACxEN,QAAQ,mBAErB,6GAKE,kBACE,GAAM,2BADR,2BAGA,yGACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,0CAAwH,0BAAYA,WAAW,MAAvB,6BAAxH,WAA0M,0BAAYA,WAAW,MAAvB,KAA1M,4BAAqR,0BAAYA,WAAW,MAAvB,KAArR,OAA2U,0BAAYA,WAAW,MAAvB,OAA3U,iDAA6a,0BAAYA,WAAW,MAAvB,gBAA7a,sBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAApB,QAAyF,0BAAYA,WAAW,MAAvB,aAAzF,aAA6J,0BAAYA,WAAW,MAAvB,qDAA7J,gD,gNAMNJ,EAAWsB,gBAAiB","file":"component---src-components-timed-renderer-mdx-c9b0fb187733a2296dad.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-timed-renderer/react-timed-renderer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { TimedRenderer } from \"./TimedRenderer\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>TimedRenderer</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`A TimedRenderer can be used to render a component at timed intervals.`}</p>\n    <p>{`Just provide the interval in milliseconds and a render prop, and the component will reliably render at the interval provided.`}</p>\n    <p>{`Powered by `}<a parentName=\"p\" {...{\n        \"href\": \"https://justinmahar.github.io/react-use-precision-timer/\"\n      }}>{`react-use-precision-timer`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { TimedRenderer } from \"react-timed-renderer\";\n`}</code></pre>\n    <div>\n  <Playground mdxType=\"Playground\">\n    <TimedRenderer interval={1000} render={time => <div>Rendered at: {time + \", \" + new Date(time).toString()}</div>} mdxType=\"TimedRenderer\" />\n  </Playground>\n  <small>\n    Note: You can edit the source above. Your changes will be rendered\n    immediately.\n  </small>\n  <br />\n  <br />\n    </div>\n    <p>{`The render prop is provided with a single argument, the time at which the render occured in milliseconds since the epoch.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={TimedRenderer} mdxType=\"Props\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Expand each prop for more information.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The following example uses a TimedRenderer with a 500ms interval and renders a div with a random border radius, background color, inset box shadow, and a 0.5 second ease-in transition.`}</p>\n    <p>{`The effect is a dancing amorphous blob that changes shape and color every half second. His name is Edward.`}</p>\n    <p>{`Try changing the interval and transition below.`}</p>\n    <div>\n  <Playground mdxType=\"Playground\">\n    <TimedRenderer interval={500} render={time => <div style={{\n          width: `140px`,\n          height: `100px`,\n          transition: `all 0.5s ease-in`,\n          borderRadius: `${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}% / ${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}% ${Math.floor(Math.random() * 101)}%`,\n          backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n          boxShadow: `inset 0 0 0 5px #${Math.floor(Math.random() * 16777215).toString(16)}`\n        }} />} mdxType=\"TimedRenderer\" />\n  </Playground>\n  <small>\n    Note: You can edit the source above. Your changes will be rendered\n    immediately.\n  </small>\n    </div>\n    <h4 {...{\n      \"id\": \"example-css-explanation\"\n    }}>{`Example CSS Explanation`}</h4>\n    <p>{`Here's a quick explanation of the random number generation happening in the CSS:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`borderRadius`}</inlineCode>{` takes eight percentages in the format `}<inlineCode parentName=\"li\">{`x% x% x% x% / x% x% x% x%`}</inlineCode>{`, where `}<inlineCode parentName=\"li\">{`x`}</inlineCode>{` is a random number from `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`100`}</inlineCode>{`. This gives it the amorphous shape. Who knew `}<inlineCode parentName=\"li\">{`borderRadius`}</inlineCode>{` could do so much?`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`backgroundColor`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`boxShadow`}</inlineCode>{` both use `}<inlineCode parentName=\"li\">{`Math.floor(Math.random() * 16777215).toString(16)`}</inlineCode>{` to generate random hex color values.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}